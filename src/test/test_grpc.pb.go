// Code generated by protoc-gen-go-scheme. DO NOT EDIT.
// versions:
// - protoc-gen-go-scheme v1.3.0
// - protoc             v3.12.4
// source: test.proto

package test

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the scheme package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransmiteService_StreamEntries_FullMethodName = "/TransmiteService/StreamEntries"
)

// TransmiteServiceClient is the client API for TransmiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmiteServiceClient interface {
	StreamEntries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TransmiteService_StreamEntriesClient, error)
}

type transmiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmiteServiceClient(cc grpc.ClientConnInterface) TransmiteServiceClient {
	return &transmiteServiceClient{cc}
}

func (c *transmiteServiceClient) StreamEntries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TransmiteService_StreamEntriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransmiteService_ServiceDesc.Streams[0], TransmiteService_StreamEntries_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transmiteServiceStreamEntriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransmiteService_StreamEntriesClient interface {
	Recv() (*Entry, error)
	grpc.ClientStream
}

type transmiteServiceStreamEntriesClient struct {
	grpc.ClientStream
}

func (x *transmiteServiceStreamEntriesClient) Recv() (*Entry, error) {
	m := new(Entry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmiteServiceServer is the server API for TransmiteService service.
// All implementations must embed UnimplementedTransmiteServiceServer
// for forward compatibility
type TransmiteServiceServer interface {
	StreamEntries(*empty.Empty, TransmiteService_StreamEntriesServer) error
	mustEmbedUnimplementedTransmiteServiceServer()
}

// UnimplementedTransmiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransmiteServiceServer struct {
}

func (UnimplementedTransmiteServiceServer) StreamEntries(*empty.Empty, TransmiteService_StreamEntriesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEntries not implemented")
}
func (UnimplementedTransmiteServiceServer) mustEmbedUnimplementedTransmiteServiceServer() {}

// UnsafeTransmiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmiteServiceServer will
// result in compilation errors.
type UnsafeTransmiteServiceServer interface {
	mustEmbedUnimplementedTransmiteServiceServer()
}

func RegisterTransmiteServiceServer(s grpc.ServiceRegistrar, srv TransmiteServiceServer) {
	s.RegisterService(&TransmiteService_ServiceDesc, srv)
}

func _TransmiteService_StreamEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmiteServiceServer).StreamEntries(m, &transmiteServiceStreamEntriesServer{stream})
}

type TransmiteService_StreamEntriesServer interface {
	Send(*Entry) error
	grpc.ServerStream
}

type transmiteServiceStreamEntriesServer struct {
	grpc.ServerStream
}

func (x *transmiteServiceStreamEntriesServer) Send(m *Entry) error {
	return x.ServerStream.SendMsg(m)
}

// TransmiteService_ServiceDesc is the grpc.ServiceDesc for TransmiteService service.
// It's only intended for direct use with scheme.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransmiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TransmiteService",
	HandlerType: (*TransmiteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEntries",
			Handler:       _TransmiteService_StreamEntries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}
